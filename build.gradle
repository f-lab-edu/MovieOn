import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id "org.springframework.boot" version "2.5.6"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "org.ec4j.editorconfig" version "0.0.3"
    id "com.github.spotbugs" version "4.7.0"
    id "checkstyle"
    id "java"
}

apply from: "$project.rootDir/gradle/scripts/test-aggregator.gradle"

subprojects {
    apply plugin: "org.ec4j.editorconfig"
    apply plugin: "com.github.spotbugs"
    apply plugin: "checkstyle"
    apply plugin: "java-library"
    apply plugin: "java"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    ext {
        SPRING_VERSION = "5.3.12"
        JUNIT_JUPITER_VERSION = "5.7.2"
        JJWT_VERSION = "0.11.2"
        ASSERTJ_VERSION = "3.19.0"
    }

    dependencies {
        compileOnly "org.projectlombok:lombok:1.18.20"
        annotationProcessor "org.projectlombok:lombok:1.18.20"
    }

    editorconfig {
        excludes = ["build"]
    }

    check.dependsOn editorconfigCheck

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        configProperties = ["suppressionFile": "${project.rootDir}/config/checkstyle/checkstyle/checkstyle-suppressions.xml"]
        toolVersion = "8.40"
        ignoreFailures = false
        maxErrors = 0
        maxWarnings = 0
    }

    spotbugs {
        ignoreFailures = false
        reportLevel = "high"
        spotbugsTest.enabled = false
    }

    tasks.withType(SpotBugsTask) {
        reports {
            text.enabled = true
            xml.enabled = false
            html.enabled = false
        }
    }

    tasks.register("printSpotbugsMain") {
        doLast {
            File mainResult = file("${buildDir}/reports/spotbugs/main.txt")
            if (mainResult.exists()) {
                mainResult.readLines().forEach {
                    println(it)
                }
            }
        }
    }

    tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")
}

bootJar {
    mainClass = "kr.flab.movieon.MovieOnApplication"
}
